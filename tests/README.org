#+title: Tests

The =main()= funtion for google test is in =test.cpp=. This file gets linked with other files in =tests/= to create the test executable. By default CMake will run google test on every build for conviience. Following is a list of tested objects.

* sbin (Binary stream)

=sbin= is one of the utility classes that is used for parsing and serialising NBT tags in this library. It's public funtions are described below.

** Iterator validity for cur()

- Construtor :: Always =begin()=
- resize() ::
  - Size became smaller :: =begin()=
  - Size didn't change or got larger :: Keeps the position at the same distance from =begin()=
- clear :: Always =begin()=
- operator= (assignment) :: At the same distance as in right hand side.
- reserve() :: Keeps the position at the same distance from =begin()=

** Class definition

Simply a pair of =vector<uint8_t>= and =iterator=. =vector= is used as the storage container and =iterator= is used to keep the position in the data after parsing or serialising is complete. Both are private members to prevent users from invalidating the =iterator=.

** Constructor

- Default constructor :: Creates an empty stream with no data and size of 0
- =sbin(const vector<uint8_t>&);= :: Will fill the member vector with data from parameter vector
- =sbin(std::istream_iterator<uint8_t>&, std::istream_iterator<uint8_t>&);= :: Fills the member vector with data from iterators. Can be used to get data from =fstream=

=cur()= always points to =begin()=.

** operator=

- =const sbin& operator=(const sbin&);= :: Copies the data from one vector to another. Also sets the =cur()= at the same distance from =begin()= as in parent vector
- =const sbin& operator=(const vector<uint8_t>&);= :: Replaces member vector data with parameter vector data and sets the =cur()= to the begining of the vector

** operator==, operator!=

Only compares nested data values. =cur()= positions have no impact on the result of the comparison.

** begin()

Returns an iterator the first byte in the stream.

** end()

Returns an iterator pointing after the last byte in the stream.

** cur()

Returns an iterator to the current element in the stream.

** get()

- At the begining or in the middle of the stream (before =end() - 1=) :: Returns value of =cur()=. Then advances the =cur()= to the next position
- Last element of the stream (=end() - 1=) :: Returns the value of =cur()=. Then advances the =cur()=. This will set the =eos= (End Ef Etream) flag to =true=
- After the last element (=stream.end()=) :: Always returns 0. Reason: Compound tag will read data untill it encounters a 0 (=0x00=). All parsing functions will not read if Tag ID is not in range 1-12. Thus returning a 0 will save you from infinite loops or recursion

** peek()

Acts in the same way as =get()= except it does not advance =cur()=.

** seek()

- Parameter iterator is within range [ =begin()= ; =end()= ) :: Sets the iterator to that position
- Parameter iterator is out of range :: Keeps the position at the same distance from =begin()=. (Has no effect)

** operator>> (parsing)

Default function template will set each byte in output object to values in the stream in big endian order.

** operator<< (serialising)

Default function template will read the input object byte by byte and append those bytes to the stream in big endian order.

** resize()

- =resize(size_t)= :: Acts in the same way as =resize(size_t, 0)= thus if the value is undefined it wont cause issues with reading garbage from newly allocated memory
- =resize(size_t, uint8_t)= ::
  - If new size is bigger or did not change :: Appends value of =uint8_t= to fill newly allocated memory. Keeps =cur()= at the same distance as it was before the call
  - If new size is smaller :: Decreases the amount of bytes in the stream. =cur()= is set to =begin()=

** size()

Returns total amount of bytes in the stream. Equivalent to calling =vector::size()=.

** reserve()

Does not change the amount of data in the stream, but may reallocate memory to fit more elements. Equivalent to calling =vector::reserve()=. Has no effect on distance between =begin()= and =cur()=.

** capacity()

Returns maximum capacity of the stream. Note that =size()= could be smaller or equal to this value.

** clear()

Calls =vector::clear()= on member =vector=. Sets =cur()= to =begin()=.

** empty()

Returns true if total amount of bytes in the stream is 0.

** eos()

Can be used to detect end of stream. If =cur()= points to =end()= or =size()= is 0 returns =true=. Otherwise =false=.

* Explanation of for (i <= 2)

** Loop coverage

Following is an insert from [[https://www.learncpp.com/cpp-tutorial/code-coverage/][Code coverage, learncpp.com]].

#+begin_quote
Loop coverage (informally called the 0, 1, 2 test) says that if you have a loop in your code, you should ensure it works properly when it iterates 0 times, 1 time, and 2 times. If it works correctly for the 2-iteration case, it should work correctly for all iterations greater than 2. These three tests therefore cover all possibilities (since a loop canâ€™t execute a negative number of times).
#+end_quote

The above is the reason why I iterate from 0 to 2 or backwards. I want the =2= to be emphasis here.

/This is a note to myself and others if you may have questions. I usually do when I see weird code./
