#+title: NBT Blacksmith
#+toc: nil

A C++ library for parsing, editing and serialising NBT data used in Java edition Minecraft.

* Documentation

Currently the only docs are in =tests/README.org=, I will be figuring out a way to generate a github.io soon probably.

That readme I mentioned is just a description of what tests do and I may get rid of it if that readme will prevent me from /just/ rewriting the tests or changing my mind about which implementation seems more logical or intuituve.

* Scope and purpose

All started with an idea to make a procedural world generator, but since minecraft uses the same format for all it's files this became a general purpose parser for NBT.

In real use case just using this library is insufficient since it doesn't handle compression which is present in almost all minecraft files. Thus you will need to use =gzip= or =zlib= for decompression purposes.

This library also doesn't read data from the file directly and instead uses a custom implementation of stream to access data. This in my opinion is better than using =fstream= since you can parse anything you really want and you are not restricted to compression type, position of the data in the file and the way you save/retrieve data from the file (=FILE*= vs =fstream= vs =iostream=, etc). And there is a safeguard build into the stream implementation to prevent infinite recursion after you run out of data.

Currently the development has stopped and I am adding [[https://github.com/google/googletest][Google test]] to catch any bugs and I know there are many. After all the code is finished I will get to work on increasing performance and efficiency.

* Prerequisites

You must have basic knowledge of C++ and some understanding of NBT.

* Building the library

It is a CMake project so all you need is this line in the terminal:

#+begin_src shell
# run this in the root of the project
$ cmake -S . -B build
#+end_src

You should see CMake build an object library and automatically run google test. There is no sample executable yet.

* About NBT standart

Quote from [[http://web.archive.org/web/20110723210920/http://www.minecraft.net/docs/NBT.txt][Web Archieve: NBT specification by Notch]]:

#+begin_quote
NBT (Named Binary Tag) is a tag based binary format designed to carry large amounts of binary data with smaller amounts of additional data.
An NBT file consists of a single GZIPped Named Tag of type =TAG_Compound=.

A Named Tag has the following format:

#+begin_src text
byte tagType
    TAG_String name
    [payload]
#+end_src
#+end_quote

There were originally 10 data types, but since snapshot 12w07a, (release version 1.2.1)[fn:1] 2 more tags have beed added making 12 total. Here is a list of all the tags:

#+name: tag_ids
| Name           | ID |
|----------------+----|
| End of compoud |  0 |
| Byte           |  1 |
| Short          |  2 |
| Int            |  3 |
| Long           |  4 |
| Float          |  5 |
| Double         |  6 |
| Byte Array     |  7 |
| String         |  8 |
| List           |  9 |
| Compound       | 10 |
| Int Array      | 11 |
| Long Array     | 12 |

Where: ID is =byte tagType= from NBT specs above.

* Implementation

If you spend some time reading the specs by Notch you will soon realize that there are 4 categories (kinds) of NBT tags:

- Primitive :: simply N bytes after the header depending on =sizeof(type)=
  - Byte
  - Short
  - Int
  - Long
  - Float
  - Double
- Array :: =ID= defines the nested data type, nested data and it's properties are the same regardless of the nested type.
  - Byte Array
  - String
  - Int Array
  - Long Array
- List :: =ID= is always =9=, but there is another =payload_ID= to identify the nested type. Stores data very similary to Array kind.
- Compound :: Contains an array of nested data and ends with =0x00=

End tag is excluded from the list since it is useless and dangerous to keep in memory as a =class= or =struct=, except for one case (list of end tags) where it is useless as a separate type either.

* Footnotes

[fn:1] [[https://minecraft.fandom.com/el/wiki/Anvil_file_format][Minecraft Wiki: Anvil file format]].
